{"version":3,"sources":["components/Treebank/Treebank.module.scss","lib/parsing.js","components/Treebank/Treebank.js","components/Treebank/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","extractPostag","postag","parseXml","xml","treebank","json","parseString","_err","result","xmlToJson","nodes","id","label","links","sentence","word","forEach","$","form","head","relation","push","pos","source","target","colorMap","n","a","d","c","r","p","i","v","m","u","l","g","x","config","rankdir","configureNodes","map","node","labelStyle","nodeConfig","linkConfig","arrowheadStyle","curve","curveBasis","configureLinks","link","Treebank","fitBoundaries","zoomable","className","styles","height","width","App","useState","setXml","data","rows","cols","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,SAAW,6B,mMCUvBC,EAAgB,SAACC,GAAD,OACpBA,EAASA,EAAO,GAAK,KAGjBC,EAAW,SAACC,GAAS,IACjBC,EAdQ,SAACD,GACjB,IAAIE,EAKJ,OAJAC,sBAAYH,GAAK,SAAUI,EAAMC,GAC/BH,EAAOG,KAGFH,EAQcI,CAAUN,GAAvBC,SACFC,EAAO,CAAEK,MAAO,CAAC,CAAEC,GAAI,IAAKC,MAAO,WAAaC,MAAO,IAO7D,OALAT,EAASU,SAAS,GAAGC,KAAKC,SAAQ,YAAiD,IAAD,IAA7CC,EAAKN,EAAwC,EAAxCA,GAAIO,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUnB,EAAc,EAAdA,OAClEI,EAAKK,MAAMW,KAAK,CAAEV,KAAIC,MAAOM,EAAMI,IAAKtB,EAAcC,KACtDI,EAAKQ,MAAMQ,KAAK,CAAEE,OAAQJ,EAAMK,OAAQb,EAAIC,MAAOQ,OAG9Cf,G,iCClBHoB,EAAW,CACfC,EAAG,oBACHC,EAAG,OACHC,EAAG,aACHC,EAAG,WACHC,EAAG,QACHC,EAAG,SACHC,EAAG,OACHC,EAAG,MACHC,EAAG,aACHC,EAAG,OACHC,EAAG,YACHC,EAAG,aACHC,EAAG,OACH,IAAK,QAGDC,EAAS,CACbC,QAAS,MASLC,EAAiB,SAAC/B,GAAD,OACrBA,EAAMgC,KAAI,SAACC,GAGT,OAFAA,EAAKJ,OARU,SAAC,GAAD,IAAGjB,EAAH,EAAGA,IAAH,MACjB,CACEsB,WAAW,SAAD,OAAWnB,EAASH,KAMhBuB,CAAWF,GAElBA,MAILG,EAAa,CACjBC,eAAgB,gBAChBC,MAAOC,KAGHC,EAAiB,SAACrC,GAAD,OACrBA,EAAM6B,KAAI,SAACS,GAGT,OAFAA,EAAKZ,OAASO,EAEPK,MChDIC,EDoDE,SAAC,GAAD,QAAGhD,SAAYM,EAAf,EAAeA,MAAOG,EAAtB,EAAsBA,MAAtB,OACf,kBAAC,IAAD,CACEH,MAAO+B,EAAe/B,GACtBG,MAAOqC,EAAerC,GACtBwC,eAAa,EACbC,UAAQ,EACRC,UAAWC,IAAOpD,SAClBmC,OAAQA,EAERkB,OAAO,MACPC,MAAM,UE9DKC,ECwDH,WAAO,IAAD,EACMC,mBAtDL,qyIAqDD,mBACTzD,EADS,KACJ0D,EADI,KAMVC,EAAO5D,EAASC,GACtB,OACE,oCACE,kBAAC,EAAD,CAAUC,SAAU0D,IACpB,6BACA,8BAAUC,KAAM,GAAIC,KAAM,IAAKC,MAAO9D,EAAK+D,SAT1B,SAAC,GAA0B,IAAdD,EAAa,EAAvBzC,OAAUyC,MAChCJ,EAAOI,QCjDSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37cdefe7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"treebank\":\"Treebank_treebank__16Adc\"};","import { parseString } from 'xml2js';\n\nconst xmlToJson = (xml) => {\n  let json;\n  parseString(xml, function (_err, result) {\n    json = result;\n  });\n\n  return json;\n};\n\nconst extractPostag = (postag) => (\n  postag ? postag[0] : '-'\n);\n\nconst parseXml = (xml) => {\n  const { treebank } = xmlToJson(xml);\n  const json = { nodes: [{ id: '0', label: '[ROOT]' }], links: [] };\n\n  treebank.sentence[0].word.forEach(({ $: { id, form, head, relation, postag }}) => {\n    json.nodes.push({ id, label: form, pos: extractPostag(postag) });\n    json.links.push({ source: head, target: id, label: relation });\n  });\n\n  return json;\n};\n\nexport {\n  parseXml,\n};\n","import React from 'react';\nimport DagreGraph from 'dagre-d3-react'\nimport { curveBasis } from 'd3-shape';\n\nimport styles from './Treebank.module.scss';\n\nconst colorMap = {\n  n: 'rgb(43, 114, 124)',\n  a: 'blue',\n  d: 'darkorange',\n  c: 'deeppink',\n  r: 'green',\n  p: 'purple',\n  i: 'gold',\n  v: 'red',\n  m: 'lightgreen',\n  u: '#222',\n  l: 'lightblue',\n  g: 'lightcoral',\n  x: 'gray',\n  '-': '#222',\n}\n\nconst config = {\n  rankdir: 'TB',\n};\n\nconst nodeConfig = ({ pos }) => (\n  {\n    labelStyle: `fill: ${colorMap[pos]}`,\n  }\n);\n\nconst configureNodes = (nodes) => (\n  nodes.map((node) => {\n    node.config = nodeConfig(node);\n\n    return node;\n  })\n);\n\nconst linkConfig = {\n  arrowheadStyle: 'display: none',\n  curve: curveBasis,\n};\n\nconst configureLinks = (links) => (\n  links.map((link) => {\n    link.config = linkConfig;\n\n    return link;\n  })\n);\n\nconst Treebank = ({ treebank: { nodes, links } }) => (\n  <DagreGraph\n    nodes={configureNodes(nodes)}\n    links={configureLinks(links)}\n    fitBoundaries\n    zoomable\n    className={styles.treebank}\n    config={config}\n\n    height=\"600\"\n    width=\"1000\"\n  />\n);\n\nexport default Treebank;\n","import Treebank from './Treebank';\n\nexport default Treebank;\n","import App from './App';\n\nexport default App;\n","import React, { useState } from 'react';\n\nimport { parseXml } from '../../lib/parsing';\nimport Treebank from '../Treebank';\n\nconst initialXml = '<treebank xml:lang=\"grc\" format=\"aldt\" version=\"1.5\">\\n \\\n  <date>Thu Aug 21 19:31:06 +0000 2014</date>\\n \\\n  <annotator>\\n \\\n    <short/>\\n \\\n    <name/>\\n \\\n    <address/>\\n \\\n    <uri>http://services.perseids.org/llt/segtok</uri>\\n \\\n  </annotator>\\n \\\n  <annotator>\\n \\\n    <short/>\\n \\\n    <name/>\\n \\\n    <address/>\\n \\\n    <uri>http://github.com/latin-language-toolkit/arethusa</uri>\\n \\\n  </annotator>\\n \\\n  <annotator>\\n \\\n    <short>Vanessa Gorman</short>\\n \\\n    <name>Vanessa Gorman</name>\\n \\\n    <address>vbgorman@gmail.com</address>\\n \\\n    <uri>\\n \\\n      http://data.perseus.org/sosol/users/Vanessa%20Gorman\\n \\\n    </uri>\\n \\\n  </annotator>\\n \\\n  <sentence id=\"1\" document_id=\"http://perseids.org/annotsrc/urn:cts:greekLit:tlg0540.tlg001.perseus-grc1\" subdoc=\"1-50\" span=\"\">\\n \\\n    <word id=\"1\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"4\"/>\\n \\\n    <word id=\"2\" form=\"πολλοῦ\" lemma=\"πολύς\" postag=\"a-s---mg-\" relation=\"ADV\" head=\"1\"/>\\n \\\n    <word id=\"3\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"4\"/>\\n \\\n    <word id=\"4\" form=\"ποιησαίμην\" lemma=\"ποιέω\" postag=\"v1saom---\" relation=\"PRED\" head=\"0\"/>\\n \\\n    <word id=\"5\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n \\\n    <word id=\"6\" form=\"ὦ\" lemma=\"ὦ\" postag=\"i--------\" relation=\"AuxZ\" head=\"7\"/>\\n \\\n    <word id=\"7\" form=\"ἄνδρες\" lemma=\"ἀνήρ\" postag=\"n-p---mv-\" relation=\"ExD\" head=\"4\"/>\\n \\\n    <word id=\"8\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n \\\n    <word id=\"9\" form=\"τὸ\" lemma=\"ὁ\" postag=\"l-s---na-\" relation=\"ATR\" head=\"18\"/>\\n \\\n    <word id=\"10\" form=\"τοιούτους\" lemma=\"τοιοῦτος\" postag=\"a-p---ma_\" relation=\"ATR\" head=\"11\"/>\\n \\\n    <word id=\"11\" form=\"ὑμᾶς\" lemma=\"σύ\" postag=\"p2p---ma-\" relation=\"SBJ\" head=\"18\"/>\\n \\\n    <word id=\"12\" form=\"ἐμοὶ\" lemma=\"ἐγώ\" postag=\"p1s---md-\" relation=\"ATR\" head=\"13\"/>\\n \\\n    <word id=\"13\" form=\"δικαστὰς\" lemma=\"δικαστής\" postag=\"n-p---ma-\" relation=\"PNOM\" head=\"18\"/>\\n \\\n    <word id=\"14\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"13\"/>\\n \\\n    <word id=\"15\" form=\"τούτου\" lemma=\"οὗτος\" postag=\"a-s---ng_\" relation=\"ATR\" head=\"17\"/>\\n \\\n    <word id=\"16\" form=\"τοῦ\" lemma=\"ὁ\" postag=\"l-s---ng-\" relation=\"ATR\" head=\"17\"/>\\n \\\n    <word id=\"17\" form=\"πράγματος\" lemma=\"πρᾶγμα\" postag=\"n-s---ng-\" relation=\"ATR\" head=\"14\"/>\\n \\\n    <word id=\"18\" form=\"γενέσθαι\" lemma=\"γίγνομαι\" postag=\"v--anm---\" relation=\"OBJ\" head=\"4\"/>\\n \\\n    <word id=\"19\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"24\"/>\\n \\\n    <word id=\"20\" form=\"οἷοίπερ\" lemma=\"οἷος\" postag=\"a-p---mn-\" relation=\"PNOM\" head=\"24\"/>\\n \\\n    <word id=\"21\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"24\"/>\\n \\\n    <word id=\"22\" form=\"ὑμῖν\" lemma=\"σύ\" postag=\"p2p---md-\" relation=\"ATR\" head=\"20\"/>\\n \\\n    <word id=\"23\" form=\"αὐτοῖς\" lemma=\"αὐτός\" postag=\"a-p---md_\" relation=\"ATR\" head=\"22\"/>\\n \\\n    <word id=\"24\" form=\"εἴητε\" lemma=\"εἰμί\" postag=\"v2ppoa---\" relation=\"ATR\" head=\"10\"/>\\n \\\n    <word id=\"25\" form=\"τοιαῦτα\" lemma=\"τοιοῦτος\" postag=\"p-p---na-\" relation=\"OBJ\" head=\"26\"/>\\n \\\n    <word id=\"26\" form=\"πεπονθότες\" lemma=\"πάσχω\" postag=\"v-prpamn-\" relation=\"ADV\" head=\"24\"/>\\n \\\n    <word id=\"27\" form=\"·\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxK\" head=\"0\"/>\\n \\\n  </sentence>\\n \\\n</treebank>';\n\nconst App = () => {\n  const [xml, setXml] = useState(initialXml);\n  const handleChange = ({ target: { value }}) => {\n    setXml(value);\n  };\n\n  const data = parseXml(xml);\n  return (\n    <>\n      <Treebank treebank={data} />\n      <br />\n      <textarea rows={30} cols={135} value={xml} onChange={handleChange} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}