{"version":3,"sources":["components/Treebank/Sentence/Sentence.module.scss","components/Treebank/Graph/Graph.module.scss","components/Treebank/InfoPanel/InfoPanel.module.scss","components/Treebank/config/config.js","components/Treebank/treebank-context.js","components/Treebank/Treebank.js","lib/parsing.js","components/Treebank/index.js","components/Treebank/Sentence/index.js","components/Treebank/Sentence/Sentence.js","components/Treebank/Graph/Graph.js","components/Treebank/Graph/index.js","components/Treebank/InfoPanel/index.js","components/Treebank/InfoPanel/InfoPanel.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","configMap","aldtMiscGrc","aldtMisc","aldt2grcStage","aldt2grc","aldt2latStage","aldt2lat","elmlatch1","elmlatch10","elmlatch10b","elmlatch11","elmlatch2","elmlatch3","elmlatch4","elmlatch5","elmlatch6","elmlatch7","elmlatch9","english","gclat","harrington","jmhgreek","lyonGrec","lyonLatin","midlat","morphgrc","morphlat","pedalion","persian","sanskrit","smyth2","smyth3","snap","testlat","turkish","ud","vortex","wheelock","wheelock13","wheelock15","wheelock17","wheelock22","wheelock24","wheelock30","wheelock46","whitaker","getColor","config","postag","plugins","morph","postagSchema","styledThrough","attributes","index","findIndex","n","mapping","values","Object","valueIndex","value","style","color","TreebankContext","createContext","displayName","configFromJson","treebankJson","format","lang","key","getConfig","treebank","$","Treebank","chunk","children","useState","active","setActive","xml","json","parseString","_err","result","xmlToJson","sentence","find","id","sentenceFromJson","Provider","defaultProps","Sentence","Consumer","className","styles","word","map","form","join","onClick","wordToSpan","dagreConfig","rankdir","configureNodes","nodes","node","labelStyle","labelType","class","nodeConfig","linkConfig","arrowheadStyle","curve","curveBasis","configureLinks","links","link","previousSentence","Graph","render","setRender","graph","label","forEach","head","relation","push","_word","source","target","sentenceToGraph","fitBoundaries","zoomable","onNodeClick","original","height","width","InfoPanel","infoPanel","deconstructedPostag","name","renderPostag","type","attribute","long","short","match","entries","deconstructPostag","App","setXml","rows","cols","onChange","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab526525.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentence\":\"Sentence_sentence__29LU5\",\"word\":\"Sentence_word__2nSWk\",\"active\":\"Sentence_active__2fq1F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"Graph_graph__2uTQA\",\"node\":\"Graph_node__1ifF1\",\"active\":\"Graph_active__32tHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoPanel\":\"InfoPanel_infoPanel__3j327\"};","import aldtMiscGrc from './arethusa-configs/aldt-misc-grc.json';\nimport aldtMisc from './arethusa-configs/aldt-misc.json';\nimport aldt2grcStage from './arethusa-configs/aldt2grc-stage.json';\nimport aldt2grc from './arethusa-configs/aldt2grc.json';\nimport aldt2latStage from './arethusa-configs/aldt2lat-stage.json';\nimport aldt2lat from './arethusa-configs/aldt2lat.json';\nimport elmlatch1 from './arethusa-configs/elmlatch1.json';\nimport elmlatch10 from './arethusa-configs/elmlatch10.json';\nimport elmlatch10b from './arethusa-configs/elmlatch10b.json';\nimport elmlatch11 from './arethusa-configs/elmlatch11.json';\nimport elmlatch2 from './arethusa-configs/elmlatch2.json';\nimport elmlatch3 from './arethusa-configs/elmlatch3.json';\nimport elmlatch4 from './arethusa-configs/elmlatch4.json';\nimport elmlatch5 from './arethusa-configs/elmlatch5.json';\nimport elmlatch6 from './arethusa-configs/elmlatch6.json';\nimport elmlatch7 from './arethusa-configs/elmlatch7.json';\nimport elmlatch9 from './arethusa-configs/elmlatch9.json';\nimport english from './arethusa-configs/english.json';\nimport gclat from './arethusa-configs/gclat.json';\nimport harrington from './arethusa-configs/harrington.json';\nimport jmhgreek from './arethusa-configs/jmhgreek.json';\nimport lyonGrec from './arethusa-configs/lyonGrec.json';\nimport lyonLatin from './arethusa-configs/lyonLatin.json';\nimport midlat from './arethusa-configs/midlat.json';\nimport morphgrc from './arethusa-configs/morphgrc.json';\nimport morphlat from './arethusa-configs/morphlat.json';\nimport pedalion from './arethusa-configs/pedalion.json';\nimport persian from './arethusa-configs/persian.json';\nimport sanskrit from './arethusa-configs/sanskrit.json';\nimport smyth2 from './arethusa-configs/smyth2.json';\nimport smyth3 from './arethusa-configs/smyth3.json';\nimport snap from './arethusa-configs/snap.json';\nimport testlat from './arethusa-configs/testlat.json';\nimport turkish from './arethusa-configs/turkish.json';\nimport ud from './arethusa-configs/ud.json';\nimport vortex from './arethusa-configs/vortex.json';\nimport wheelock from './arethusa-configs/wheelock.json';\nimport wheelock13 from './arethusa-configs/wheelock1-3.json';\nimport wheelock15 from './arethusa-configs/wheelock15.json';\nimport wheelock17 from './arethusa-configs/wheelock17.json';\nimport wheelock22 from './arethusa-configs/wheelock22.json';\nimport wheelock24 from './arethusa-configs/wheelock24.json';\nimport wheelock30 from './arethusa-configs/wheelock30.json';\nimport wheelock46 from './arethusa-configs/wheelock4-6.json';\nimport whitaker from './arethusa-configs/whitaker.json';\n\nconst configMap = {\n  'aldt-misc-grc': aldtMiscGrc,\n  'aldt-misc': aldtMisc,\n  'aldt2grc-stage': aldt2grcStage,\n  aldt2grc,\n  'aldt2lat-stage': aldt2latStage,\n  aldt2lat,\n  elmlatch1,\n  elmlatch10,\n  elmlatch10b,\n  elmlatch11,\n  elmlatch2,\n  elmlatch3,\n  elmlatch4,\n  elmlatch5,\n  elmlatch6,\n  elmlatch7,\n  elmlatch9,\n  english,\n  gclat,\n  harrington,\n  jmhgreek,\n  lyonGrec,\n  lyonLatin,\n  midlat,\n  morphgrc,\n  morphlat,\n  pedalion,\n  persian,\n  sanskrit,\n  smyth2,\n  smyth3,\n  snap,\n  testlat,\n  turkish,\n  ud,\n  vortex,\n  wheelock,\n  'wheelock1-3': wheelock13,\n  wheelock15,\n  wheelock17,\n  wheelock22,\n  wheelock24,\n  wheelock30,\n  'wheelock4-6': wheelock46,\n  whitaker,\n};\n\nconst getConfig = (format, lang) => {\n  // Backwards compatibility\n  const key = format === 'aldt' ? `aldt2${lang}` : format;\n\n  if (configMap[key]) {\n    return configMap[key];\n  }\n\n  if (lang === 'grc') {\n    return aldtMiscGrc;\n  }\n\n  return aldtMisc;\n};\n\nconst getColor = (config, postag) => {\n  if (postag && config.plugins && config.plugins.morph) {\n    const { postagSchema, styledThrough, attributes } = config.plugins.morph;\n    const index = postagSchema.findIndex((n) => n === styledThrough);\n    const mapping = attributes[styledThrough];\n\n    if (mapping && index > -1) {\n      const values = Object.values(mapping.values);\n      const valueIndex = values.findIndex(({ postag: abbreviation }) => (\n        abbreviation === postag[index]\n      ));\n\n      if (valueIndex > -1) {\n        const value = values[valueIndex];\n\n        if (value.style && value.style.color) {\n          return value.style.color;\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst deconstructPostag = (config, postag) => {\n  const deconstructedPostag = [];\n\n  if (postag && config.plugins && config.plugins.morph) {\n    const { postagSchema, attributes } = config.plugins.morph;\n\n    postagSchema.forEach((type, index) => {\n      const attribute = attributes[type];\n      const name = attribute.long || attribute.short || type;\n      const values = Object.entries(attribute.values);\n      const match = values.find(([, { postag: abbreviation }]) => abbreviation === postag[index]);\n\n      if (match) {\n        deconstructedPostag.push([\n          name,\n          match[1].long || match[1].short || match[0],\n        ]);\n      }\n    });\n  }\n\n  return deconstructedPostag;\n};\n\nexport {\n  getConfig,\n  getColor,\n  deconstructPostag,\n};\n","import { createContext } from 'react';\n\nconst TreebankContext = createContext();\n\nTreebankContext.displayName = 'TreebankContext';\n\nexport default TreebankContext;\n","import React, { useState } from 'react';\nimport { node, string } from 'prop-types';\n\nimport { xmlToJson } from '../../lib/parsing';\nimport { getConfig } from './config';\n\nimport TreebankContext from './treebank-context';\n\nconst sentenceFromJson = (treebankJson, chunk) => (\n  treebankJson.treebank.sentence.find(({ $ }) => $.id && $.id === chunk)\n);\n\nconst configFromJson = (treebankJson) => (\n  getConfig(\n    treebankJson.treebank.$['xml:lang'],\n    treebankJson.treebank.$.format,\n  )\n);\n\nconst Treebank = ({ treebank, chunk, children }) => {\n  const [active, setActive] = useState(null);\n  const treebankJson = xmlToJson(treebank);\n  const sentence = sentenceFromJson(treebankJson, chunk);\n  const config = configFromJson(treebankJson);\n\n  return (\n    <TreebankContext.Provider value={{\n      sentence,\n      chunk,\n      config,\n      active,\n      setActive,\n    }}\n    >\n      {children}\n    </TreebankContext.Provider>\n  );\n};\n\nTreebank.propTypes = {\n  treebank: string.isRequired,\n  chunk: string.isRequired,\n  children: node,\n};\n\nTreebank.defaultProps = {\n  children: null,\n};\n\nexport default Treebank;\n","import { parseString } from 'xml2js';\n\nconst xmlToJson = (xml) => {\n  let json;\n  parseString(xml, (_err, result) => {\n    json = result;\n  });\n\n  return json;\n};\n\nconst sentenceToGraph = (sentence) => {\n  const graph = { nodes: [{ id: '0', label: '[ROOT]' }], links: [] };\n\n  sentence.word.forEach((word) => {\n    const {\n      $: {\n        id, form, head, relation, postag,\n      },\n    } = word;\n    graph.nodes.push({\n      id, label: form, postag, _word: word,\n    });\n    graph.links.push({ source: head, target: id, label: relation });\n  });\n\n  return graph;\n};\n\nexport {\n  xmlToJson,\n  sentenceToGraph,\n};\n","import Treebank from './Treebank';\n\nexport default Treebank;\n","import Sentence from './Sentence';\n\nexport default Sentence;\n","import React, { Fragment } from 'react';\n\nimport styles from './Sentence.module.scss';\n\nimport { getColor } from '../config';\n\nimport TreebankContext from '../treebank-context';\n\n// eslint-disable-next-line react/prop-types\nconst wordToSpan = (config, active, setActive, word) => {\n  const { $: { id, form, postag } } = word;\n  const color = getColor(config, postag);\n  const isActive = active && active.$.id === id;\n  const className = isActive ? [styles.word, styles.active].join(' ') : styles.word;\n\n  return (\n    <Fragment key={id}>\n      <span\n        onClick={() => setActive(word)}\n        className={className}\n        style={{ color }}\n      >\n        {form}\n      </span>\n      {' '}\n    </Fragment>\n  );\n};\n\nconst Sentence = () => (\n  <TreebankContext.Consumer>\n    {({\n      sentence, active, setActive, config,\n    }) => (\n      <div className={styles.sentence}>\n        <p>\n          {sentence.word.map((word) => wordToSpan(config, active, setActive, word))}\n        </p>\n      </div>\n    )}\n  </TreebankContext.Consumer>\n);\n\nexport default Sentence;\n","import React, { useState } from 'react';\nimport DagreGraph from 'dagre-d3-react';\nimport { curveBasis } from 'd3-shape';\n\nimport styles from './Graph.module.scss';\n\nimport { sentenceToGraph } from '../../../lib/parsing';\nimport { getColor } from '../config';\n\nimport TreebankContext from '../treebank-context';\n\nconst dagreConfig = {\n  rankdir: 'TB',\n};\n\nconst nodeConfig = (config, active, { id, postag }) => {\n  const color = getColor(config, postag);\n  const isActive = active && active.$.id === id;\n  const className = isActive ? [styles.node, styles.active].join(' ') : styles.node;\n\n  return {\n    labelStyle: `color: ${color}`,\n    labelType: 'html',\n    class: className,\n  };\n};\n\nconst configureNodes = (config, active, nodes) => (\n  nodes.map((node) => {\n    // eslint-disable-next-line no-param-reassign\n    node.config = nodeConfig(config, active, node);\n\n    return node;\n  })\n);\n\nconst linkConfig = {\n  arrowheadStyle: 'display: none',\n  curve: curveBasis,\n};\n\nconst configureLinks = (links) => (\n  links.map((link) => {\n    // eslint-disable-next-line no-param-reassign\n    link.config = linkConfig;\n\n    return link;\n  })\n);\n\nlet previousSentence = null;\nconst Graph = () => {\n  const [render, setRender] = useState(true);\n\n  return (\n    <TreebankContext.Consumer>\n      {({\n        sentence, active, setActive, config,\n      }) => {\n        const { nodes, links } = sentenceToGraph(sentence);\n\n        // TODO this is a workaround for a re-rendering issue in the Dagre D3 React library.\n        // It's only here to get the demo working!\n        // In the future, we will use a custom Dagre D3 wrapper instead of the library.\n        if (previousSentence !== sentence) {\n          previousSentence = sentence;\n          setRender(!render);\n\n          return <div />;\n        }\n\n        return (\n          <DagreGraph\n            nodes={configureNodes(config, active, nodes)}\n            links={configureLinks(links)}\n            fitBoundaries\n            zoomable\n            className={styles.graph}\n            config={dagreConfig}\n            onNodeClick={({ original: { _word } }) => setActive(_word)}\n\n            height=\"600\"\n            width=\"1000\"\n          />\n        );\n      }}\n    </TreebankContext.Consumer>\n  );\n};\n\nexport default Graph;\n","import Graph from './Graph';\n\nexport default Graph;\n","import InfoPanel from './InfoPanel';\n\nexport default InfoPanel;\n","import React, { Fragment } from 'react';\n\nimport styles from './InfoPanel.module.scss';\n\nimport { deconstructPostag } from '../config';\n\nimport TreebankContext from '../treebank-context';\n\nconst renderPostag = (deconstructedPostag) => (\n  <dl>\n    {deconstructedPostag.map(([name, value]) => (\n      <Fragment key={name}>\n        <dt>{name}</dt>\n        <dd>{value}</dd>\n      </Fragment>\n    ))}\n  </dl>\n);\n\nconst InfoPanel = () => (\n  <TreebankContext.Consumer>\n    {({ active, config }) => {\n      if (active) {\n        const { $: { postag } } = active;\n\n        return (\n          <div className={styles.infoPanel}>\n            {renderPostag(deconstructPostag(config, postag))}\n          </div>\n        );\n      }\n\n      return (\n        <div />\n      );\n    }}\n  </TreebankContext.Consumer>\n);\n\nexport default InfoPanel;\n","import App from './App';\n\nexport default App;\n","import React, { useState } from 'react';\n\nimport Treebank from '../Treebank';\nimport Sentence from '../Treebank/Sentence';\nimport Graph from '../Treebank/Graph';\nimport InfoPanel from '../Treebank/InfoPanel';\n\nconst initialXml = '<treebank xml:lang=\"grc\" format=\"aldt\" version=\"1.5\">\\n'\n  + '   <date>Thu Aug 21 19:31:06 +0000 2014</date>\\n'\n  + '   <annotator>\\n'\n  + '     <short/>\\n'\n  + '     <name/>\\n'\n  + '     <address/>\\n'\n  + '     <uri>http://services.perseids.org/llt/segtok</uri>\\n'\n  + '   </annotator>\\n'\n  + '   <annotator>\\n'\n  + '     <short/>\\n'\n  + '     <name/>\\n'\n  + '     <address/>\\n'\n  + '     <uri>http://github.com/latin-language-toolkit/arethusa</uri>\\n'\n  + '   </annotator>\\n'\n  + '   <annotator>\\n'\n  + '     <short>Vanessa Gorman</short>\\n'\n  + '     <name>Vanessa Gorman</name>\\n'\n  + '     <address>vbgorman@gmail.com</address>\\n'\n  + '     <uri>\\n'\n  + '       http://data.perseus.org/sosol/users/Vanessa%20Gorman\\n'\n  + '     </uri>\\n'\n  + '   </annotator>\\n'\n  + '   <sentence id=\"1\" document_id=\"http://perseids.org/annotsrc/urn:cts:greekLit:tlg0540.tlg001.perseus-grc1\" subdoc=\"1-50\" span=\"\">\\n'\n  + '     <word id=\"1\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"4\"/>\\n'\n  + '     <word id=\"2\" form=\"πολλοῦ\" lemma=\"πολύς\" postag=\"a-s---mg-\" relation=\"ADV\" head=\"1\"/>\\n'\n  + '     <word id=\"3\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"4\"/>\\n'\n  + '     <word id=\"4\" form=\"ποιησαίμην\" lemma=\"ποιέω\" postag=\"v1saom---\" relation=\"PRED\" head=\"0\"/>\\n'\n  + '     <word id=\"5\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n'\n  + '     <word id=\"6\" form=\"ὦ\" lemma=\"ὦ\" postag=\"i--------\" relation=\"AuxZ\" head=\"7\"/>\\n'\n  + '     <word id=\"7\" form=\"ἄνδρες\" lemma=\"ἀνήρ\" postag=\"n-p---mv-\" relation=\"ExD\" head=\"4\"/>\\n'\n  + '     <word id=\"8\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n'\n  + '     <word id=\"9\" form=\"τὸ\" lemma=\"ὁ\" postag=\"l-s---na-\" relation=\"ATR\" head=\"18\"/>\\n'\n  + '     <word id=\"10\" form=\"τοιούτους\" lemma=\"τοιοῦτος\" postag=\"a-p---ma_\" relation=\"ATR\" head=\"11\"/>\\n'\n  + '     <word id=\"11\" form=\"ὑμᾶς\" lemma=\"σύ\" postag=\"p2p---ma-\" relation=\"SBJ\" head=\"18\"/>\\n'\n  + '     <word id=\"12\" form=\"ἐμοὶ\" lemma=\"ἐγώ\" postag=\"p1s---md-\" relation=\"ATR\" head=\"13\"/>\\n'\n  + '     <word id=\"13\" form=\"δικαστὰς\" lemma=\"δικαστής\" postag=\"n-p---ma-\" relation=\"PNOM\" head=\"18\"/>\\n'\n  + '     <word id=\"14\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"13\"/>\\n'\n  + '     <word id=\"15\" form=\"τούτου\" lemma=\"οὗτος\" postag=\"a-s---ng_\" relation=\"ATR\" head=\"17\"/>\\n'\n  + '     <word id=\"16\" form=\"τοῦ\" lemma=\"ὁ\" postag=\"l-s---ng-\" relation=\"ATR\" head=\"17\"/>\\n'\n  + '     <word id=\"17\" form=\"πράγματος\" lemma=\"πρᾶγμα\" postag=\"n-s---ng-\" relation=\"ATR\" head=\"14\"/>\\n'\n  + '     <word id=\"18\" form=\"γενέσθαι\" lemma=\"γίγνομαι\" postag=\"v--anm---\" relation=\"OBJ\" head=\"4\"/>\\n'\n  + '     <word id=\"19\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"24\"/>\\n'\n  + '     <word id=\"20\" form=\"οἷοίπερ\" lemma=\"οἷος\" postag=\"a-p---mn-\" relation=\"PNOM\" head=\"24\"/>\\n'\n  + '     <word id=\"21\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"24\"/>\\n'\n  + '     <word id=\"22\" form=\"ὑμῖν\" lemma=\"σύ\" postag=\"p2p---md-\" relation=\"ATR\" head=\"20\"/>\\n'\n  + '     <word id=\"23\" form=\"αὐτοῖς\" lemma=\"αὐτός\" postag=\"a-p---md_\" relation=\"ATR\" head=\"22\"/>\\n'\n  + '     <word id=\"24\" form=\"εἴητε\" lemma=\"εἰμί\" postag=\"v2ppoa---\" relation=\"ATR\" head=\"10\"/>\\n'\n  + '     <word id=\"25\" form=\"τοιαῦτα\" lemma=\"τοιοῦτος\" postag=\"p-p---na-\" relation=\"OBJ\" head=\"26\"/>\\n'\n  + '     <word id=\"26\" form=\"πεπονθότες\" lemma=\"πάσχω\" postag=\"v-prpamn-\" relation=\"ADV\" head=\"24\"/>\\n'\n  + '     <word id=\"27\" form=\"·\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxK\" head=\"0\"/>\\n'\n  + '   </sentence>\\n'\n  + ' </treebank>';\n\nconst App = () => {\n  const [xml, setXml] = useState(initialXml);\n  const handleChange = ({ target: { value } }) => {\n    setXml(value);\n  };\n\n  return (\n    <>\n      <Treebank treebank={xml} chunk=\"1\">\n        <Sentence />\n        <Graph />\n        <InfoPanel />\n      </Treebank>\n      <br />\n      <textarea rows={30} cols={135} value={xml} onChange={handleChange} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}