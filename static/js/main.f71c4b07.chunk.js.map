{"version":3,"sources":["components/Xml/Xml.module.scss","components/Information/Information.module.scss","components/Sentence/Sentence.module.scss","components/Graph/Graph.module.scss","components/App/App.module.scss","components/Treebank/Treebank.module.scss","components/Treebank/config/config.js","components/Treebank/treebank-context.js","components/Treebank/Treebank.js","lib/parsing.js","components/Treebank/index.js","types/types.js","components/Sentence/Sentence.js","components/Sentence/index.js","components/Treebank/Sentence/index.js","components/Treebank/Sentence/Sentence.js","components/Graph/Graph.js","components/Graph/index.js","components/Treebank/Graph/index.js","components/Treebank/Graph/Graph.js","components/Information/Information.js","components/Information/index.js","components/Treebank/Information/index.js","components/Treebank/Information/Information.js","components/Xml/Xml.js","components/Xml/index.js","components/Treebank/Xml/index.js","components/Treebank/Xml/Xml.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","configMap","aldtMiscGrc","aldtMisc","aldt2grcStage","aldt2grc","aldt2latStage","aldt2lat","elmlatch1","elmlatch10","elmlatch10b","elmlatch11","elmlatch2","elmlatch3","elmlatch4","elmlatch5","elmlatch6","elmlatch7","elmlatch9","english","gclat","harrington","jmhgreek","lyonGrec","lyonLatin","midlat","morphgrc","morphlat","pedalion","persian","sanskrit","smyth2","smyth3","snap","testlat","turkish","ud","vortex","wheelock","wheelock13","wheelock15","wheelock17","wheelock22","wheelock24","wheelock30","wheelock46","whitaker","getColor","config","postag","plugins","morph","postagSchema","styledThrough","attributes","index","findIndex","n","mapping","values","Object","valueIndex","value","style","color","TreebankContext","createContext","displayName","configFromJson","treebankJson","format","lang","key","getConfig","treebank","$","Treebank","chunk","children","useState","active","setActive","xml","json","parseString","_err","result","xmlToJson","sentence","find","id","sentenceFromJson","Provider","toggleActive","word","className","styles","container","defaultProps","wordType","shape","string","isRequired","form","lemma","relation","head","document_id","subdoc","span","arrayOf","Sentence","map","join","onClick","wordToSpan","Consumer","dagreConfig","rankdir","configureNodes","nodes","node","labelStyle","labelType","class","nodeConfig","linkConfig","arrowheadStyle","curve","curveBasis","configureLinks","links","link","Graph","graph","label","forEach","push","_word","source","target","sentenceToGraph","zoomable","onNodeClick","original","renderPostag","name","dt","dd","Information","information","dl","renderLemma","deconstructedPostag","type","attribute","long","short","match","entries","deconstructPostag","attributesToJsx","attributeText","openingTag","close","prefix","bracket","element","Xml","renderWord","App","setXml","rows","cols","onChange","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f71c4b07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"xml\":\"Xml_xml__37UG-\",\"word\":\"Xml_word__16azV\",\"active\":\"Xml_active__2Zbqx\",\"bracket\":\"Xml_bracket__pDA7B\",\"element\":\"Xml_element__rPzm0\",\"attribute\":\"Xml_attribute__3SPEP\",\"attributeText\":\"Xml_attributeText__2wXx9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"information\":\"Information_information__vOdxZ\",\"dl\":\"Information_dl__2PYr7\",\"container\":\"Information_container__2GHTu\",\"dt\":\"Information_dt__Uphkr\",\"dd\":\"Information_dd__aePCH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentence\":\"Sentence_sentence__12PUC\",\"word\":\"Sentence_word__FUcEI\",\"active\":\"Sentence_active__V8eNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"Graph_graph__2dKjk\",\"node\":\"Graph_node__1yL6J\",\"active\":\"Graph_active__3WRE7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"treebank\":\"App_treebank__2Vf_S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Treebank_container__2DDEp\"};","import aldtMiscGrc from './arethusa-configs/aldt-misc-grc.json';\nimport aldtMisc from './arethusa-configs/aldt-misc.json';\nimport aldt2grcStage from './arethusa-configs/aldt2grc-stage.json';\nimport aldt2grc from './arethusa-configs/aldt2grc.json';\nimport aldt2latStage from './arethusa-configs/aldt2lat-stage.json';\nimport aldt2lat from './arethusa-configs/aldt2lat.json';\nimport elmlatch1 from './arethusa-configs/elmlatch1.json';\nimport elmlatch10 from './arethusa-configs/elmlatch10.json';\nimport elmlatch10b from './arethusa-configs/elmlatch10b.json';\nimport elmlatch11 from './arethusa-configs/elmlatch11.json';\nimport elmlatch2 from './arethusa-configs/elmlatch2.json';\nimport elmlatch3 from './arethusa-configs/elmlatch3.json';\nimport elmlatch4 from './arethusa-configs/elmlatch4.json';\nimport elmlatch5 from './arethusa-configs/elmlatch5.json';\nimport elmlatch6 from './arethusa-configs/elmlatch6.json';\nimport elmlatch7 from './arethusa-configs/elmlatch7.json';\nimport elmlatch9 from './arethusa-configs/elmlatch9.json';\nimport english from './arethusa-configs/english.json';\nimport gclat from './arethusa-configs/gclat.json';\nimport harrington from './arethusa-configs/harrington.json';\nimport jmhgreek from './arethusa-configs/jmhgreek.json';\nimport lyonGrec from './arethusa-configs/lyonGrec.json';\nimport lyonLatin from './arethusa-configs/lyonLatin.json';\nimport midlat from './arethusa-configs/midlat.json';\nimport morphgrc from './arethusa-configs/morphgrc.json';\nimport morphlat from './arethusa-configs/morphlat.json';\nimport pedalion from './arethusa-configs/pedalion.json';\nimport persian from './arethusa-configs/persian.json';\nimport sanskrit from './arethusa-configs/sanskrit.json';\nimport smyth2 from './arethusa-configs/smyth2.json';\nimport smyth3 from './arethusa-configs/smyth3.json';\nimport snap from './arethusa-configs/snap.json';\nimport testlat from './arethusa-configs/testlat.json';\nimport turkish from './arethusa-configs/turkish.json';\nimport ud from './arethusa-configs/ud.json';\nimport vortex from './arethusa-configs/vortex.json';\nimport wheelock from './arethusa-configs/wheelock.json';\nimport wheelock13 from './arethusa-configs/wheelock1-3.json';\nimport wheelock15 from './arethusa-configs/wheelock15.json';\nimport wheelock17 from './arethusa-configs/wheelock17.json';\nimport wheelock22 from './arethusa-configs/wheelock22.json';\nimport wheelock24 from './arethusa-configs/wheelock24.json';\nimport wheelock30 from './arethusa-configs/wheelock30.json';\nimport wheelock46 from './arethusa-configs/wheelock4-6.json';\nimport whitaker from './arethusa-configs/whitaker.json';\n\nconst configMap = {\n  'aldt-misc-grc': aldtMiscGrc,\n  'aldt-misc': aldtMisc,\n  'aldt2grc-stage': aldt2grcStage,\n  aldt2grc,\n  'aldt2lat-stage': aldt2latStage,\n  aldt2lat,\n  elmlatch1,\n  elmlatch10,\n  elmlatch10b,\n  elmlatch11,\n  elmlatch2,\n  elmlatch3,\n  elmlatch4,\n  elmlatch5,\n  elmlatch6,\n  elmlatch7,\n  elmlatch9,\n  english,\n  gclat,\n  harrington,\n  jmhgreek,\n  lyonGrec,\n  lyonLatin,\n  midlat,\n  morphgrc,\n  morphlat,\n  pedalion,\n  persian,\n  sanskrit,\n  smyth2,\n  smyth3,\n  snap,\n  testlat,\n  turkish,\n  ud,\n  vortex,\n  wheelock,\n  'wheelock1-3': wheelock13,\n  wheelock15,\n  wheelock17,\n  wheelock22,\n  wheelock24,\n  wheelock30,\n  'wheelock4-6': wheelock46,\n  whitaker,\n};\n\nconst getConfig = (format, lang) => {\n  // Backwards compatibility\n  const key = format === 'aldt' ? `aldt2${lang}` : format;\n\n  if (configMap[key]) {\n    return configMap[key];\n  }\n\n  if (lang === 'grc') {\n    return aldtMiscGrc;\n  }\n\n  return aldtMisc;\n};\n\nconst getColor = (config, postag) => {\n  if (postag && config.plugins && config.plugins.morph) {\n    const { postagSchema, styledThrough, attributes } = config.plugins.morph;\n    const index = postagSchema.findIndex((n) => n === styledThrough);\n    const mapping = attributes[styledThrough];\n\n    if (mapping && index > -1) {\n      const values = Object.values(mapping.values);\n      const valueIndex = values.findIndex(({ postag: abbreviation }) => (\n        abbreviation === postag[index]\n      ));\n\n      if (valueIndex > -1) {\n        const value = values[valueIndex];\n\n        if (value.style && value.style.color) {\n          return value.style.color;\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst deconstructPostag = (config, postag) => {\n  const deconstructedPostag = [];\n\n  if (postag && config.plugins && config.plugins.morph) {\n    const { postagSchema, attributes } = config.plugins.morph;\n\n    postagSchema.forEach((type, index) => {\n      const attribute = attributes[type];\n      const name = attribute.long || attribute.short || type;\n      const values = Object.entries(attribute.values);\n      const match = values.find(([, { postag: abbreviation }]) => abbreviation === postag[index]);\n\n      if (match) {\n        deconstructedPostag.push([\n          name,\n          match[1].long || match[1].short || match[0],\n        ]);\n      }\n    });\n  }\n\n  return deconstructedPostag;\n};\n\nexport {\n  getConfig,\n  getColor,\n  deconstructPostag,\n};\n","import { createContext } from 'react';\n\nconst TreebankContext = createContext();\n\nTreebankContext.displayName = 'TreebankContext';\n\nexport default TreebankContext;\n","import React, { useState } from 'react';\nimport { node, string } from 'prop-types';\n\nimport styles from './Treebank.module.scss';\n\nimport { xmlToJson } from '../../lib/parsing';\nimport { getConfig } from './config';\n\nimport TreebankContext from './treebank-context';\n\nconst sentenceFromJson = (treebankJson, chunk) => (\n  treebankJson.treebank.sentence.find(({ $ }) => $.id && $.id === chunk)\n);\n\nconst configFromJson = (treebankJson) => (\n  getConfig(\n    treebankJson.treebank.$['xml:lang'],\n    treebankJson.treebank.$.format,\n  )\n);\n\nconst Treebank = ({ treebank, chunk, children }) => {\n  const [active, setActive] = useState(null);\n  const treebankJson = xmlToJson(treebank);\n  const sentence = sentenceFromJson(treebankJson, chunk);\n  const config = configFromJson(treebankJson);\n\n  const toggleActive = (word) => {\n    if (word && active && word.$.id === active.$.id) {\n      setActive(null);\n    } else {\n      setActive(word);\n    }\n  };\n\n  return (\n    <TreebankContext.Provider value={{\n      sentence,\n      chunk,\n      config,\n      active,\n      toggleActive,\n    }}\n    >\n      <div className={styles.container}>\n        {children}\n      </div>\n    </TreebankContext.Provider>\n  );\n};\n\nTreebank.propTypes = {\n  treebank: string.isRequired,\n  chunk: string.isRequired,\n  children: node,\n};\n\nTreebank.defaultProps = {\n  children: null,\n};\n\nexport default Treebank;\n","import { parseString } from 'xml2js';\n\nconst xmlToJson = (xml) => {\n  let json;\n  parseString(xml, (_err, result) => {\n    json = result;\n  });\n\n  return json;\n};\n\nconst sentenceToGraph = (sentence) => {\n  const graph = { nodes: [{ id: '0', label: '[ROOT]' }], links: [] };\n\n  sentence.word.forEach((word) => {\n    const {\n      $: {\n        id, form, head, relation, postag,\n      },\n    } = word;\n    graph.nodes.push({\n      id, label: form, postag, _word: word,\n    });\n    graph.links.push({ source: head, target: id, label: relation });\n  });\n\n  return graph;\n};\n\nexport {\n  xmlToJson,\n  sentenceToGraph,\n};\n","import Treebank from './Treebank';\n\nexport default Treebank;\n","import {\n  arrayOf,\n  shape,\n  string,\n} from 'prop-types';\n\nconst wordType = shape({\n  $: shape({\n    id: string.isRequired,\n    form: string,\n    lemma: string,\n    postag: string,\n    relation: string,\n    head: string,\n  }),\n});\n\nconst sentenceType = shape({\n  $: shape({\n    id: string.isRequired,\n    document_id: string,\n    subdoc: string,\n    span: string,\n  }),\n  word: arrayOf(wordType),\n});\n\nexport {\n  wordType,\n  sentenceType,\n};\n","import React, { Fragment } from 'react';\nimport { object, func } from 'prop-types';\n\nimport { sentenceType, wordType } from '../../types';\n\nimport styles from './Sentence.module.scss';\n\nimport { getColor } from '../Treebank/config';\n\n// eslint-disable-next-line react/prop-types\nconst wordToSpan = (config, active, toggleActive, word) => {\n  const { $: { id, form, postag } } = word;\n  const color = getColor(config, postag);\n  const isActive = active && active.$.id === id;\n  const className = isActive ? [styles.word, styles.active].join(' ') : styles.word;\n\n  return (\n    <Fragment key={id}>\n      <span\n        onClick={() => toggleActive(word)}\n        className={className}\n        style={{ color }}\n      >\n        {form}\n      </span>\n      {' '}\n    </Fragment>\n  );\n};\n\nconst Sentence = ({\n  sentence, active, toggleActive, config,\n}) => (\n  <div className={styles.sentence}>\n    <p>\n      {sentence.word.map((word) => wordToSpan(config, active, toggleActive, word))}\n    </p>\n  </div>\n);\n\nSentence.propTypes = {\n  sentence: sentenceType.isRequired,\n  active: wordType,\n  toggleActive: func,\n  // eslint-disable-next-line react/forbid-prop-types\n  config: object.isRequired,\n};\n\nSentence.defaultProps = {\n  active: null,\n  toggleActive: () => {},\n};\n\nexport default Sentence;\n","import Sentence from './Sentence';\n\nexport default Sentence;\n","import Sentence from './Sentence';\n\nexport default Sentence;\n","import React from 'react';\n\nimport TreebankContext from '../treebank-context';\n\nimport Sentence from '../../Sentence';\n\nconst SentenceWithContext = () => (\n  <TreebankContext.Consumer>\n    {({\n      sentence, active, toggleActive, config,\n    }) => (\n      <Sentence sentence={sentence} active={active} toggleActive={toggleActive} config={config} />\n    )}\n  </TreebankContext.Consumer>\n);\n\nexport default SentenceWithContext;\n","import React from 'react';\nimport DagreGraph from 'dagre-d3-react';\nimport { curveBasis } from 'd3-shape';\nimport { object, func } from 'prop-types';\n\nimport { sentenceType, wordType } from '../../types';\n\nimport styles from './Graph.module.scss';\n\nimport { sentenceToGraph } from '../../lib/parsing';\nimport { getColor } from '../Treebank/config';\n\nconst dagreConfig = {\n  rankdir: 'TB',\n};\n\nconst nodeConfig = (config, active, { id, postag }) => {\n  const color = getColor(config, postag);\n  const isActive = active && active.$.id === id;\n  const className = isActive ? [styles.node, styles.active].join(' ') : styles.node;\n\n  return {\n    labelStyle: `color: ${color}`,\n    labelType: 'html',\n    class: className,\n  };\n};\n\nconst configureNodes = (config, active, nodes) => (\n  nodes.map((node) => {\n    // eslint-disable-next-line no-param-reassign\n    node.config = nodeConfig(config, active, node);\n\n    return node;\n  })\n);\n\nconst linkConfig = {\n  arrowheadStyle: 'display: none',\n  curve: curveBasis,\n};\n\nconst configureLinks = (links) => (\n  links.map((link) => {\n    // eslint-disable-next-line no-param-reassign\n    link.config = linkConfig;\n\n    return link;\n  })\n);\n\nconst Graph = ({\n  sentence, active, toggleActive, config,\n}) => {\n  const { nodes, links } = sentenceToGraph(sentence);\n\n  return (\n    <DagreGraph\n      nodes={configureNodes(config, active, nodes)}\n      links={configureLinks(links)}\n      zoomable\n      className={styles.graph}\n      config={dagreConfig}\n      onNodeClick={({ original: { _word } }) => toggleActive(_word)}\n    />\n  );\n};\n\nGraph.propTypes = {\n  sentence: sentenceType.isRequired,\n  active: wordType,\n  toggleActive: func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  config: object.isRequired,\n};\n\nGraph.defaultProps = {\n  active: null,\n};\n\nexport default Graph;\n","import Graph from './Graph';\n\nexport default Graph;\n","import Graph from './Graph';\n\nexport default Graph;\n","import React from 'react';\n\nimport TreebankContext from '../treebank-context';\n\nimport Graph from '../../Graph';\n\nconst GraphWithContext = () => (\n  <TreebankContext.Consumer>\n    {({\n      sentence, active, toggleActive, config,\n    }) => <Graph sentence={sentence} active={active} toggleActive={toggleActive} config={config} />}\n  </TreebankContext.Consumer>\n);\n\nexport default GraphWithContext;\n","import React from 'react';\nimport { object } from 'prop-types';\n\nimport { wordType } from '../../types';\n\nimport styles from './Information.module.scss';\n\nimport { deconstructPostag } from '../Treebank/config';\n\nconst renderLemma = (lemma) => (\n  <div className={styles.container}>\n    <dt className={styles.dt}>Lemma</dt>\n    <dd className={styles.dd}>{lemma}</dd>\n  </div>\n);\n\nconst renderPostag = ([name, value]) => (\n  <div key={name} className={styles.container}>\n    <dt className={styles.dt}>{name}</dt>\n    <dd className={styles.dd}>{value}</dd>\n  </div>\n);\n\nconst Information = ({ active, config }) => {\n  if (active) {\n    const { $: { postag, lemma } } = active;\n\n    return (\n      <div className={styles.information}>\n        <dl className={styles.dl}>\n          {renderLemma(lemma)}\n          {deconstructPostag(config, postag).map(renderPostag)}\n        </dl>\n      </div>\n    );\n  }\n\n  return (\n    <div />\n  );\n};\n\nInformation.propTypes = {\n  active: wordType,\n  // eslint-disable-next-line react/forbid-prop-types\n  config: object.isRequired,\n};\n\nInformation.defaultProps = {\n  active: null,\n};\n\nexport default Information;\n","import Information from './Information';\n\nexport default Information;\n","import Information from './Information';\n\nexport default Information;\n","import React from 'react';\n\nimport TreebankContext from '../treebank-context';\n\nimport Information from '../../Information';\n\nconst InformationWithContext = () => (\n  <TreebankContext.Consumer>\n    {({ active, config }) => <Information active={active} config={config} />}\n  </TreebankContext.Consumer>\n);\n\nexport default InformationWithContext;\n","import React, { Fragment } from 'react';\nimport { func } from 'prop-types';\n\nimport { sentenceType, wordType } from '../../types';\n\nimport styles from './Xml.module.scss';\n\nconst attributesToJsx = (attributes) => (\n  Object.entries(attributes).map(([key, value]) => (\n    <Fragment key={key}>\n      {' '}\n      <span className={styles.attribute}>\n        {key}\n        =\n      </span>\n      <span className={styles.attributeText}>\n        &quot;\n        {value}\n        &quot;\n      </span>\n    </Fragment>\n  ))\n);\n\nconst openingTag = (name, attributes, key, close = false, prefix = '') => (\n  <Fragment key={key}>\n    <span className={styles.bracket}>\n      {prefix}\n      &lt;\n    </span>\n    <span className={styles.element}>{name}</span>\n    {attributesToJsx(attributes)}\n    {close ? ' /' : ''}\n    <span className={styles.bracket}>&gt;</span>\n    <br />\n  </Fragment>\n);\n\nconst closingTag = (name, key) => (\n  <Fragment key={key}>\n    <span className={styles.bracket}>&lt;</span>\n    <span className={styles.element}>\n      /\n      {name}\n    </span>\n    <span className={styles.bracket}>&gt;</span>\n  </Fragment>\n);\n\nconst renderWord = (word, active, toggleActive) => {\n  const { $: { id } } = word;\n  const isActive = active && active.$.id === id;\n  const className = isActive ? [styles.word, styles.active].join(' ') : styles.word;\n\n  return (\n    <div\n      key={id}\n      className={className}\n      onClick={() => toggleActive(word)}\n    >\n      {openingTag('word', word.$, id, true, <>&nbsp;&nbsp;&nbsp;&nbsp;</>)}\n    </div>\n  );\n};\n\nconst Xml = ({ sentence, active, toggleActive }) => (\n  <div className={styles.xml}>\n    {openingTag('sentence', sentence.$, 'sentence')}\n    {sentence.word.map((word) => (\n      renderWord(word, active, toggleActive)\n    ))}\n    {closingTag('sentence', 'sentence-close')}\n  </div>\n);\n\nXml.propTypes = {\n  sentence: sentenceType.isRequired,\n  active: wordType,\n  toggleActive: func,\n};\n\nXml.defaultProps = {\n  active: null,\n  toggleActive: () => {},\n};\n\nexport default Xml;\n","import Xml from './Xml';\n\nexport default Xml;\n","import Xml from './Xml';\n\nexport default Xml;\n","import React from 'react';\n\nimport TreebankContext from '../treebank-context';\n\nimport Xml from '../../Xml';\n\nconst XmlWithContext = () => (\n  <TreebankContext.Consumer>\n    {({ sentence, active, toggleActive }) => (\n      <Xml sentence={sentence} active={active} toggleActive={toggleActive} />\n    )}\n  </TreebankContext.Consumer>\n);\n\nexport default XmlWithContext;\n","import App from './App';\n\nexport default App;\n","import React, { useState } from 'react';\n\nimport styles from './App.module.scss';\n\nimport Treebank from '../Treebank';\nimport Sentence from '../Treebank/Sentence';\nimport Graph from '../Treebank/Graph';\nimport Information from '../Treebank/Information';\nimport Xml from '../Treebank/Xml';\n\nconst initialXml = '<treebank xml:lang=\"grc\" format=\"aldt\" version=\"1.5\">\\n'\n  + '   <date>Thu Aug 21 19:31:06 +0000 2014</date>\\n'\n  + '   <annotator>\\n'\n  + '     <short/>\\n'\n  + '     <name/>\\n'\n  + '     <address/>\\n'\n  + '     <uri>http://services.perseids.org/llt/segtok</uri>\\n'\n  + '   </annotator>\\n'\n  + '   <annotator>\\n'\n  + '     <short/>\\n'\n  + '     <name/>\\n'\n  + '     <address/>\\n'\n  + '     <uri>http://github.com/latin-language-toolkit/arethusa</uri>\\n'\n  + '   </annotator>\\n'\n  + '   <annotator>\\n'\n  + '     <short>Vanessa Gorman</short>\\n'\n  + '     <name>Vanessa Gorman</name>\\n'\n  + '     <address>vbgorman@gmail.com</address>\\n'\n  + '     <uri>\\n'\n  + '       http://data.perseus.org/sosol/users/Vanessa%20Gorman\\n'\n  + '     </uri>\\n'\n  + '   </annotator>\\n'\n  + '   <sentence id=\"1\" document_id=\"http://perseids.org/annotsrc/urn:cts:greekLit:tlg0540.tlg001.perseus-grc1\" subdoc=\"1-50\" span=\"\">\\n'\n  + '     <word id=\"1\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"4\"/>\\n'\n  + '     <word id=\"2\" form=\"πολλοῦ\" lemma=\"πολύς\" postag=\"a-s---mg-\" relation=\"ADV\" head=\"1\"/>\\n'\n  + '     <word id=\"3\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"4\"/>\\n'\n  + '     <word id=\"4\" form=\"ποιησαίμην\" lemma=\"ποιέω\" postag=\"v1saom---\" relation=\"PRED\" head=\"0\"/>\\n'\n  + '     <word id=\"5\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n'\n  + '     <word id=\"6\" form=\"ὦ\" lemma=\"ὦ\" postag=\"i--------\" relation=\"AuxZ\" head=\"7\"/>\\n'\n  + '     <word id=\"7\" form=\"ἄνδρες\" lemma=\"ἀνήρ\" postag=\"n-p---mv-\" relation=\"ExD\" head=\"4\"/>\\n'\n  + '     <word id=\"8\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"7\"/>\\n'\n  + '     <word id=\"9\" form=\"τὸ\" lemma=\"ὁ\" postag=\"l-s---na-\" relation=\"ATR\" head=\"18\"/>\\n'\n  + '     <word id=\"10\" form=\"τοιούτους\" lemma=\"τοιοῦτος\" postag=\"a-p---ma_\" relation=\"ATR\" head=\"11\"/>\\n'\n  + '     <word id=\"11\" form=\"ὑμᾶς\" lemma=\"σύ\" postag=\"p2p---ma-\" relation=\"SBJ\" head=\"18\"/>\\n'\n  + '     <word id=\"12\" form=\"ἐμοὶ\" lemma=\"ἐγώ\" postag=\"p1s---md-\" relation=\"ATR\" head=\"13\"/>\\n'\n  + '     <word id=\"13\" form=\"δικαστὰς\" lemma=\"δικαστής\" postag=\"n-p---ma-\" relation=\"PNOM\" head=\"18\"/>\\n'\n  + '     <word id=\"14\" form=\"περὶ\" lemma=\"περί\" postag=\"r--------\" relation=\"AuxP\" head=\"13\"/>\\n'\n  + '     <word id=\"15\" form=\"τούτου\" lemma=\"οὗτος\" postag=\"a-s---ng_\" relation=\"ATR\" head=\"17\"/>\\n'\n  + '     <word id=\"16\" form=\"τοῦ\" lemma=\"ὁ\" postag=\"l-s---ng-\" relation=\"ATR\" head=\"17\"/>\\n'\n  + '     <word id=\"17\" form=\"πράγματος\" lemma=\"πρᾶγμα\" postag=\"n-s---ng-\" relation=\"ATR\" head=\"14\"/>\\n'\n  + '     <word id=\"18\" form=\"γενέσθαι\" lemma=\"γίγνομαι\" postag=\"v--anm---\" relation=\"OBJ\" head=\"4\"/>\\n'\n  + '     <word id=\"19\" form=\",\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxX\" head=\"24\"/>\\n'\n  + '     <word id=\"20\" form=\"οἷοίπερ\" lemma=\"οἷος\" postag=\"a-p---mn-\" relation=\"PNOM\" head=\"24\"/>\\n'\n  + '     <word id=\"21\" form=\"ἂν\" lemma=\"ἄν1\" postag=\"d--------\" relation=\"AuxY\" head=\"24\"/>\\n'\n  + '     <word id=\"22\" form=\"ὑμῖν\" lemma=\"σύ\" postag=\"p2p---md-\" relation=\"ATR\" head=\"20\"/>\\n'\n  + '     <word id=\"23\" form=\"αὐτοῖς\" lemma=\"αὐτός\" postag=\"a-p---md_\" relation=\"ATR\" head=\"22\"/>\\n'\n  + '     <word id=\"24\" form=\"εἴητε\" lemma=\"εἰμί\" postag=\"v2ppoa---\" relation=\"ATR\" head=\"10\"/>\\n'\n  + '     <word id=\"25\" form=\"τοιαῦτα\" lemma=\"τοιοῦτος\" postag=\"p-p---na-\" relation=\"OBJ\" head=\"26\"/>\\n'\n  + '     <word id=\"26\" form=\"πεπονθότες\" lemma=\"πάσχω\" postag=\"v-prpamn-\" relation=\"ADV\" head=\"24\"/>\\n'\n  + '     <word id=\"27\" form=\"·\" lemma=\"punc1\" postag=\"u--------\" relation=\"AuxK\" head=\"0\"/>\\n'\n  + '   </sentence>\\n'\n  + ' </treebank>';\n\nconst App = () => {\n  const [xml, setXml] = useState(initialXml);\n  const handleChange = ({ target: { value } }) => {\n    setXml(value);\n  };\n\n  return (\n    <div className={styles.treebank}>\n      <Treebank treebank={xml} chunk=\"1\">\n        <Sentence />\n        <Information />\n        <Graph />\n        <Xml />\n      </Treebank>\n      <br />\n      <textarea rows={30} cols={135} value={xml} onChange={handleChange} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}